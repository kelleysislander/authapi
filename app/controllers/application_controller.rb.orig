# Filters added to this controller apply to all controllers in the application.
# Likewise, all the methods added will be available for all controllers.

class ApplicationController < ActionController::Base
  before_filter :prepare_for_mobile

  helper :all # include all helpers, all the time
  helper_method :current_user_session, :current_user

  # Scrub sensitive parameters from your log
#  filter_parameter_logging :login, :web_app_id, :password

  def current_user_session
    return @current_user_session if defined?(@current_user_session)
    @current_user_session = UserSession.find
  end

  def current_user
    return @current_user if defined?(@current_user)
    @current_user = current_user_session && current_user_session.record
  end

  def login_required
    unless current_user
      flash[:notice] = "You must be logged in to access this page."
      redirect_to new_user_session_path
      return false
    end
  end

  def store_location
    session[:return_to] = request.request_uri
  end

  def redirect_back_or_default(default)
    redirect_to(session[:return_to] || default)
    session[:return_to] = nil
  end

  def any_account_admin_required
    redirect_to dashboard_path unless @current_user.is_account_admin?
  end

  def account_admin_required
    redirect_to dashboard_path unless @current_user.is_admin?(Account.find(params[:id]))
  end

  def admin_required
    redirect_to dashboard_path unless @current_user.is_admin?
  end

  def admin_required_if_logged_in
    access_denied if current_user and not @current_user.is_admin?
  end

  def mobile_device?
    if session[:mobile_param]
      session[:mobile_param] == "1"
    else
      request.user_agent =~ /Mobile|webOS/
    end
  end
  helper_method :mobile_device?

  def prepare_for_mobile
    session[:mobile_param] = params[:mobile] if params[:mobile]
     request.format = :mobile if mobile_device?
  end
end
